[{"content":"博客内容主要参考黑马程序员视频课程的设计模式笔记，面向《设计模式：可复用面向对象软件的基础》中介绍收录的经典的23个设计模式，进行阐述和介绍\n初识设计模式 软件设计模式（Software Design Pattern），又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。它描述的是在软件设计过程中不断发生的问题，以及该问题的解决方案。\n设计模式的分类：\n创建型模式：描述如何创建对象，特点是“对象的创建与使用分离”。主要包含单例、原型、工厂方法、抽象工厂、建造者5种类型。 结构型模式：描述如何将类或者对象按某种布局组成更大的结构，丰富其功能。主要包含：代理、适配器、桥接、装饰、外观、享元、组合7种类型。 行为型模式：描述类与对象之间怎样相互协作共同完成单个对象无法完成的任务，以及如何分配职责。主要包含模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器11种类型。 软件设计原则 在软件开发中，为了提高软件系统的可维护性和可复用性，增加软件的可扩展性和灵活性，程序员要尽量根据一些原则来进行开发，以下介绍6条原则。\n开闭原则：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。最方便的方式是使用接口和抽象类。 软件中易变的细节可以从抽象派生来的实现类来进行扩展，当软件需要发生变化时，只需要根据需求重新派生一个实现类来扩展就可以。\n里氏代换原则：面向对象设计的基本原则。任何父类可以出现的地方，子类一定可以出现。即，子类可以扩展父类的功能，但不能改变父类原有的功能。也即子类继承以实现新功能时尽量不要重写父类方法。需要重写应该通过接口和抽象类进行扩展。\n依赖倒转原则：高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象，即面向抽象编程，不要对实现编程。 直观一点说，可扩展的变量应该是一个接口，而不是具体的实现类。\n接口隔离原则：一个类对另一个类的依赖应该建立在最小的接口上，一个类依赖的两个类（接口）之间不应该有重叠。\n迪米特法则：最少知识原则。当前对象本身、当前对象的成员对象、当前对象所创建的对象、当前对象的方法参数等，这些对象同当前对象存在关联、聚合或组合关系，可以直接访问这些对象的方法。如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。\n合成复用原则：尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。即尽量使用接口进行组合，而不是直接进行分类的继承。\n优势：维持了类的封装性，“黑箱复用”，而不是像继承复用一样将父类的实现细节暴露给子类，且耦合度低，灵活性高，动态引用。 创建者模式 描述如何创建对象，特点是“对象的创建与使用分离”。\n单例设计模式 Single Pattern是java中最简单的设计模式之一，提供了一种创建对象的最佳方式。\n这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象\n单例模式主要有两种分类：\n饿汉式：类加载就会导致该单实例对象被创建 懒汉式：类加载不会导致该单实例对象被创建，而是首次使用该对象时才会创建 单例模式的实现 饿汉式——静态变量方式 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public class Singleton(){ //私有构造方法 private Sinbleton(){} // 类静态变量的直接初始化 // 随着类加载而创建 private static Singleton instance = new Singleton(); // 也可以在静态代码块初始化 static { instance = new Singleton(); } public static Singleton getInstance(){ return instance; } } 优势在于提前的初始化，问题在于如果该对象足够大的话，而一直没有使用就会造成内存的浪费\n懒汉式——双重检查锁单例模式 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 public class Singleton(){ //私有构造方法 private Sinbleton(){} private static Singleton instance; public static synchronized Singleton getInstance(){ if(instance == null){ instance = new Singleton(); } return instance; } // 双重检查锁方式 public static Singleton getInstance(){ if(instance == null){ synchronized(Singleton.class){ if(instance == null){ instance = new Singleton(); } } } return instance; } } 上述的双重检查锁单例模式（Double-Checked Locking Singleton） 是一种非常好的单例实现模式，解决了单例、性能、线程安全问题，看上去完美无缺，但仍然存在一定问题。在多线程的情况下，可能会出现 空指针问题，出现问题的原因是JVM在实例化对象的时候会进行优化和指令重排序操作。解决方式可以使用volatile关键字，保证变量的可见性与有序性。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public class Singleton(){ //私有构造方法 private Sinbleton(){} private static volatile Singleton instance; // 双重检查锁方式 public static Singleton getInstance(){ if(instance == null){ synchronized(Singleton.class){ if(instance == null){ instance = new Singleton(); } } } return instance; } } volatile详解：上面的代码会出现问题的主要原因在于，new Singleton() 并不是一个原子操作，在JVM底层，上述操作大致会被编译为三步操作：\n分配内存空间 调用构造函数初始化对象 将内存地址赋值给变量 instance JVM 和 CPU 只保证指令在单一线程中一致，为了优化性能，可能会重新排序指令，可能重排序为：\n分配内存空间 将内存地址赋值给变量 instance 调用构造函数初始化对象 这时线程便可能拿到一个未完全构造的对象。而volatile关键字便是用来解决这样的问题。它有两个关键作用：\n禁止指令重排序优化：保证在写入 instance 变量时，对象的构造操作（初始化）一定在前， 保证可见性（visibility）：当一个线程修改了 instance，其他线程能立即看到最新的值，避免出现线程读到旧值的情况。 懒汉式——静态内部类实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 public class Singleton { //私有构造方法 private Singleton() {} private static class SingletonHolder { private static final Singleton INSTANCE = new Singleton(); } //对外提供静态方法获取该对象 public static Singleton getInstance() { return SingletonHolder.INSTANCE; } } 第一次加载Singleton类时不会去初始化INSTANCE，只有第一次调用getInstance，虚拟机加载SingletonHolder并初始化INSTANCE，这样不仅能确保线程安全，也能保证 Singleton 类的唯一性。\n枚举方式 枚举类实现单例模式是极力推荐的单例实现模式，因为枚举类型是线程安全的，并且只会装载一次，写法简单，且是所用单例实现中唯一一种不会被破坏的单例实现模式（普通单例类若实现了 Serializable 接口，在反序列化时可能创建新对象），也是Effective Java推荐的写法。枚举方式是一种饿汉方式，由JVM保证单例和反序列化。\n1 2 3 4 5 public enum Singleton { INSTANCE; } // 使用方式 Singleton singleton = Singleton.INSTANCE; 在上面的例子中，Singleton 是一个枚举类，并且它只包含一个枚举常量 INSTANCE，这个常量即代表了单例模式的唯一实例。\n特点：\n线程安全： 枚举类的实例是在类加载时创建的，且由于 Java 的枚举类型是天然线程安全的，枚举实例的创建是由 JVM 保证的，不需要任何同步机制。\n防止反射攻击：反射机制无法破坏枚举的单例性，因为调用 enum 的构造器会抛出异常。\n防止序列化破坏：枚举类本质上是不可序列化的，且即使通过序列化反序列化也不会创建新的实例，因为枚举类的 readResolve() 方法已经由 JVM 内部自动实现，保证了枚举实例的唯一性。\n可以使用枚举持有一个已有类的实例，进行单例管理。本质就是提供一个单例的类管理器，其中持有一个唯一实例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 public enum SingletonManager { INSTANCE; private final Singleton instance; // 初始化已有类实例 SingletonManager() { instance = new Singleton(); } public ConfigManager getInstance() { return instance; } } 存在的问题 破坏单例模式 通过序列化和反射，除了枚举方式外，即使使用单例类，也能创建多个对象。\n序列化与反序列化 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 public class Singleton implements Serializable { //私有构造方法 private Singleton() {} private static class SingletonHolder { private static final Singleton INSTANCE = new Singleton(); } //对外提供静态方法获取该对象 public static Singleton getInstance() { return SingletonHolder.INSTANCE; } } public class Test { public static void main(String[] args) throws Exception { //往文件中写对象 //writeObject2File(); //从文件中读取对象 Singleton s1 = readObjectFromFile(); Singleton s2 = readObjectFromFile(); //判断两个反序列化后的对象是否是同一个对象,输出结果为false！ System.out.println(s1 == s2); } private static Singleton readObjectFromFile() throws Exception { //创建对象输入流对象 ObjectInputStream ois = new ObjectInputStream(new FileInputStream(\u0026#34;C:\\\\Users\\\\Think\\\\Desktop\\\\a.txt\u0026#34;)); //第一个读取Singleton对象 Singleton instance = (Singleton) ois.readObject(); return instance; } public static void writeObject2File() throws Exception { //获取Singleton类的对象 Singleton instance = Singleton.getInstance(); //创建对象输出流 ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(\u0026#34;C:\\\\Users\\\\Think\\\\Desktop\\\\a.txt\u0026#34;)); //将instance对象写出到文件中 oos.writeObject(instance); } } 解决方式：为类添加readResolve方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 public class Singleton implements Serializable { //私有构造方法 private Singleton() {} private static class SingletonHolder { private static final Singleton INSTANCE = new Singleton(); } //对外提供静态方法获取该对象 public static Singleton getInstance() { return SingletonHolder.INSTANCE; } /** * 下面是为了解决序列化反序列化破解单例模式 */ private Object readResolve() { return SingletonHolder.INSTANCE; } } 以上方式只对于饿汉式有效，需要提前创建出一个对象。懒汉式也可以通过添加代码实现。\n源码解析：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 public final Object readObject() throws IOException, ClassNotFoundException{ ... // if nested read, passHandle contains handle of enclosing object int outerHandle = passHandle; try { Object obj = readObject0(false);//重点查看readObject0方法 ..... } private Object readObject0(boolean unshared) throws IOException { ... try { switch (tc) { ... case TC_OBJECT: return checkResolve(readOrdinaryObject(unshared));//重点查看readOrdinaryObject方法 ... } } finally { depth--; bin.setBlockDataMode(oldMode); } } private Object readOrdinaryObject(boolean unshared) throws IOException { ... //isInstantiable 返回true，执行 desc.newInstance()，通过反射创建新的单例类， obj = desc.isInstantiable() ? desc.newInstance() : null; ... // 在Singleton类中添加 readResolve 方法后 desc.hasReadResolveMethod() 方法执行结果为true if (obj != null \u0026amp;\u0026amp; handles.lookupException(passHandle) == null \u0026amp;\u0026amp; desc.hasReadResolveMethod()) { // 通过反射调用 Singleton 类中的 readResolve 方法，将返回值赋值给rep变量 // 这样多次调用ObjectInputStream类中的readObject方法，继而就会调用我们定义的readResolve方法，所以返回的是同一个对象。 Object rep = desc.invokeReadResolve(obj); ... } return obj; } 反射方式 反射也会破坏单例模式\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 public class Singleton { //私有构造方法 private Singleton() {} private static volatile Singleton instance; //对外提供静态方法获取该对象 public static Singleton getInstance() { if(instance != null) { return instance; } synchronized (Singleton.class) { if(instance != null) { return instance; } instance = new Singleton(); return instance; } } } public class Test { public static void main(String[] args) throws Exception { //获取Singleton类的字节码对象 Class clazz = Singleton.class; //获取Singleton类的私有无参构造方法对象 Constructor constructor = clazz.getDeclaredConstructor(); //取消访问检查 constructor.setAccessible(true); //创建Singleton类的对象s1 Singleton s1 = (Singleton) constructor.newInstance(); //创建Singleton类的对象s2 Singleton s2 = (Singleton) constructor.newInstance(); //判断通过反射创建的两个Singleton对象是否是同一个对象,输出为false！ System.out.println(s1 == s2); } } 解决方式：在构造函数中添加额外的代码，避免反射调用构造函数。只对于饿汉式有效，因为它提前创建了对象\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 public class Singleton { //私有构造方法 private Singleton() { /* 反射破解单例模式需要添加的代码 */ if(instance != null) { throw new RuntimeException(); } } private static volatile Singleton instance; //对外提供静态方法获取该对象 public static Singleton getInstance() { if(instance != null) { return instance; } synchronized (Singleton.class) { if(instance != null) { return instance; } instance = new Singleton(); return instance; } } } JDK源码解析 Runtime类使用的就是单例模式，具体使用的是饿汉式，源码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 public class Runtime { private static Runtime currentRuntime = new Runtime(); /** * Returns the runtime object associated with the current Java application. * Most of the methods of class \u0026lt;code\u0026gt;Runtime\u0026lt;/code\u0026gt; are instance * methods and must be invoked with respect to the current runtime object. * * @return the \u0026lt;code\u0026gt;Runtime\u0026lt;/code\u0026gt; object associated with the current * Java application. */ public static Runtime getRuntime() { return currentRuntime; } /** Don\u0026#39;t let anyone else instantiate this class */ private Runtime() {} ... } public class RuntimeDemo { public static void main(String[] args) throws IOException { //获取Runtime类对象 Runtime runtime = Runtime.getRuntime(); //返回 Java 虚拟机中的内存总量。 System.out.println(runtime.totalMemory()); //返回 Java 虚拟机试图使用的最大内存量。 System.out.println(runtime.maxMemory()); //创建一个新的进程执行指定的字符串命令，返回进程对象 Process process = runtime.exec(\u0026#34;ipconfig\u0026#34;); //获取命令执行后的结果，通过输入流获取 InputStream inputStream = process.getInputStream(); byte[] arr = new byte[1024 * 1024* 100]; int b = inputStream.read(arr); System.out.println(new String(arr,0,b,\u0026#34;gbk\u0026#34;)); } } ","date":"2025-10-24T23:02:00+08:00","permalink":"https://superkp.github.io/p/introduction-to-java-design-patterns/","title":"Introduction to Java Design Patterns"},{"content":"这篇博客是个人学习教程《风光摄影后期基础》的学习笔记，其中有很多直接对于原书直接的摘录和引用，再加上了自己的一些总结和感悟。博客中的照片绝大部分都来自原书，如有侵权立即删除。\n\u0026ldquo;风光摄影，是以展现自然风光之美为主要创作题材的原创作品（如自然景色、城市建筑摄影等） ，是多元摄影中的一个门类。从摄影术诞生那天起，风光摄影就独占鳌头。人类第一张永久性摄影作品就是风光（1826年，法国人尼埃普斯拍摄了他自家窗外的景物《窗外景色》）\u0026quot;——百度百科\n风光摄影现在主要分为流行风光摄影、自然风光摄影和艺术风光摄影。其中流行风光摄影，兼顾职业和爱好，综合想法、前期拍摄和后期处理，是最热门的一个领域；流行风光摄影重在风光美的展现，以及情绪、气氛的渲染，后期处理的尺度较宽。流行风光摄影也有比较大的群众基础，国内的图虫网（tuchong.com）、500px.me，以及国外的Instagram、500px.com和1x.com都是大众流行领域、优秀风光摄影师和优秀作品云集的地方。\n自然风光摄影则更强调前期拍摄的探索和发现，后期处理的尺度较窄。自然风光摄影的领军者，毫无疑问是《国家地理》杂志及其网站，上面的作品有鲜为人知的无人区景色、惊险刺激的户外探险记录，以及罕见的自然天相和景观。天文摄影随着技术的普及和大众意识的提高，是自然风光摄影领域中发展最快的一个分支。\n而艺术风光摄影，则更多地是探索一些创新的表达方式，以及记录、反思和展现人类发展、环境变迁、自然进化的相关主题。这些严肃的话题就是这些爱好者们很少系统性涉及的地方了。\n后期重要的是什么？ 学习摄影，要多思考，要跳出器材、工具、技术层面的羁绊，从更高的角度，跳出框架去思考。决定一张照片的好坏，并不是使用了什么技术，用了什么器材，而是照片最后的美感以及内容的呈现。\n在照片中应用构图法则、色彩搭配和视觉引导，不仅是为了应用技术从基本框架与原理上让照片更好看，更是为了突出主题和主体，强化情感气氛并传达场景故事。所以我们说：\n器材服务于技术，技术服务于形式，形式服务于内容。也即内容决定形式，形式决定技术\n后期处理时非常强调美学上的最终效果、层次的分离、立体感的打造，以及光线的渲染，这些才是真正让一张照片光彩照人的关键，以何种技术去得到这样的效果，只是难易之分，反而是次要的\n最后引用泰罗的一句话阐述，摄影后期的三个层次就是，简单矫正，还原眼睛之所见；局部修饰，还原脑海之所现；艺术加工，还原心中之所想。心有所想，用术还原\n如何评价照片？ 看到一张照片时，评价主要分为第一印象与细致的细节分析\n给人印象深刻的照片一般在以下3个方面表现突出：\n震撼力：对题材的陌生感、画面的冲击力，以及故事的感染力\n兴趣点与主体吸引，用摄影与后期技术带来光影、明暗、反差等，带来震撼力 广角中，夸张的前景带来的冲击感 长焦中，光影的明暗冷暖与细节特写 故事感： 情绪与氛围：运用各种视觉语言，把创作者的情绪和拍摄环境的氛围传达给观众。对画面情绪和氛围的强化、乃至重新塑造，是后期处理的重点之一\n完成度：作品的完善程度，核心在于细节。整体影调、色彩统一，没有大的瑕疵。这涉及到对于各种后期处理工具和技术的熟练掌握，也需要总结出自己的一套完整的操作流程，能够全面滴处理好照片\n从震撼力、情绪与氛围和完成度对一张照片形成了第一印象后，进行步分析，边需要从内容、形式和技术3个角度去剖析。内容涉及的是对题材的把握和了解，形式涉及的是审美情趣，而技术则考验基本功底的掌握。\n内容：对拍摄对象的深刻理解，长期的深入实践，才能够掌握一个题材、内容如何拍摄。\n**基本情况的掌握：**对题材的自然特点（季节、潮位、花期、星象、云雾、极光、火山活动等）、各种照片、攻略、游记与路线都要掌握，在平面地图和3D地形图上，反复模拟现场机位，甚至多次前往实地考察。普通人和我这样的爱好者可能没有这么多的心思和功夫，但基本的情况和特点需要掌握，才有更好的把握记录下更好的风光。 更成熟的思考和构图：例如，摄影师看到山的时候就会想：这座山的形态和方位是怎样的，哪个角度、什么时候的光线拍摄出来的照片立体感最好？山附近有哪些可以衬托的前景—村镇、花丛、湖泊，还是峡谷 以下就是普通的Ama Dablam峰的游客视角： 而下图则是摄影师的视角，其引入了峡谷、河流及月光，在通过引导线突出雪山的同时，大大丰富了画面，提升了照片的空间层次感：\n从熟练到创新，在内容上的创新能力，是评判一位风光摄影师的决定性因素 形式：有些时候，我们与大师们后期处理的差距不在技术上，而是在形式上，也就是照片的美感上。一张照片从形式上，主要可以分解为：构图和光影\n构图：从物体的取舍，到放置的平衡。 光影：摄影是光影的艺术，光影是照片的灵魂。其决定了一张照片的明暗和色彩，从而决定了整张照片的情绪。 技术：技术是摄影师的基本功，基本需要保证一张照片的曝光和对焦等，进一步保证水平线、畸变矫正、污点处理、锐化控制和合成顺滑，再利用诸如曝光合成、镜头矫正和色彩断层控制等技术，使得照片更加出彩。\n","date":"2025-10-23T00:31:00+08:00","permalink":"https://superkp.github.io/p/phtotgraphy01step-into-landscape-photography/","title":"Phtotgraphy01——Step into Landscape Photography"},{"content":"滑动窗口（Sliding Window）是在面对数组和字符串题目时常见的方法与思路，在面对“具有某种特征的子区间”相关问题处理时尤其有效。其核心思想是在序列上维护一个**“窗口”，“窗口”内包含的是满足题目特征的子序列。通过“窗口”的滑动，实现对序列的快速遍历与处理。这里的处理通常指的是针对于具有某种特征的子序列的查找。因而，解决具有某种特征的连续子序列查找问题**是滑动窗口方法主要的应用，而这也是数组和字符串题目的一大重点内容。\n例如，在题目3090. 每个字符最多出现两次的最长子字符串中，“每个字符最多出现两次”就是题目对于子序列的要求，需要做的就是遍历查找这样的子序列的最大长度。\n滑动窗口方法通常分为定长滑动窗口和动态滑动窗口两种基本窗口模式，题目中会以明确的子序列长度限制进行区分。前者相对更简单，一般只需要滑动定长窗口，对窗口内元素进行统计；后者由于窗口长度动态，涉及窗口内元素的动态添加与移除，但也有相对固定的模式和框架可以进行总结。\n本文剩下部分将从定长滑动窗口、动态滑动窗口两种基本窗口模式入手，分别介绍其基本思路、算法框架与例题。\n定长滑动窗口 动态滑动窗口 求子序列最长/最大 求子序列最短/最小 求子数组个数 ","date":"2025-10-22T16:39:00+08:00","image":"https://superkp.github.io/p/from-sliding-window-to-algorithm/sliding-window_hu_44ea7793dc19bd30.jpg","permalink":"https://superkp.github.io/p/from-sliding-window-to-algorithm/","title":"From Sliding Window to Algorithm"},{"content":"1、如果去其他超一线城市旅游，可以找周边城市里离高铁站近的住处，高铁半小时到，通勤时间没增加多少，却大大节省了成本，比如去北京旅游可以买廊坊的酒店\n2、买衣服可以考虑童装和男装，童装大号很合适，男装小号也不错\n","date":"2025-10-14T21:06:00+08:00","permalink":"https://superkp.github.io/p/%E6%8F%90%E5%8D%87%E7%94%9F%E6%B4%BB%E5%B0%8F%E6%8A%80%E5%B7%A7/","title":"提升生活小技巧"},{"content":"近日，主播学习了如何督促有拖延症的众多室友去打扫卫生，不仅彰显公平使得众人没有异议，还能有效督促不需要唠叨多次。\n1、设定倒垃圾或者值日的顺序，一般按床位顺序以彰显公平\n2、如果发现有人忘记倒垃圾，或者卫生委员将睡觉时还未回寝，私发或在群里叫他，话术“回来记得倒垃圾”即可\n3、每隔一段时间如果觉得宿舍应该打扫了，估计一下工作量，分成几部分，比如一个人扫，一个人拖，抽签决定，如果任务量数小于宿舍人数，设置轮空选项，抽到轮空选项者下次再打扫\n4、如果有人长期不在宿舍，那么她就不需倒垃圾\n5、如果长假期间宿舍人员波动较多，则按原顺序，当日不在场则跳过，A电费同理\n","date":"2025-10-14T20:52:00+08:00","permalink":"https://superkp.github.io/p/%E5%A6%82%E4%BD%95%E5%8F%AB%E8%88%8D%E5%8F%8B%E5%8E%BB%E6%89%93%E6%89%AB%E5%8D%AB%E7%94%9F/","title":"如何叫舍友去打扫卫生"},{"content":"For more details, check out the documentation.\nBilibili video Tencent video YouTube video Generic video file Your browser doesn't support HTML5 video. Here is a link to the video instead. Gist GitLab Quote Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― A famous person, The book they wrote Photo by Codioful on Unsplash\n","date":"2025-10-09T22:56:00+08:00","image":"https://superkp.github.io/p/shortcodes/cover_hu_5667347daefb4230.jpg","permalink":"https://superkp.github.io/p/shortcodes/","title":"Shortcodes"},{"content":"来看科迪被小梅变成了榛子略略略~\n","date":"2025-10-09T21:27:00+08:00","image":"https://superkp.github.io/p/slug/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20251009213020_hu_b9105281ea9a9ce7.png","permalink":"https://superkp.github.io/p/slug/","title":"Let's start our Blog trip!"},{"content":"Stack has built-in support for math typesetting using KaTeX.\nIt\u0026rsquo;s not enabled by default side-wide, but you can enable it for individual posts by adding math: true to the front matter. Or you can enable it side-wide by adding math = true to the params.article section in config.toml.\nInline math This is an inline mathematical expression: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\n1 $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$ Block math $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$ 1 2 3 $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$ $$ f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi),e^{2 \\pi i \\xi x},d\\xi $$ 1 2 3 $$ f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi $$ ","date":"2023-08-24T00:00:00Z","permalink":"https://superkp.github.io/p/math-typesetting/","title":"Math Typesetting"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] One line code block 1 \u0026lt;p\u0026gt;A paragraph\u0026lt;/p\u0026gt; List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit\nApple Orange Banana Dairy\nMilk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nThe above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2023-09-07T00:00:00Z","permalink":"https://superkp.github.io/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"}]